{"version":3,"sources":["Site.js","App.js","serviceWorker.js","index.js"],"names":["Site","props","name","url","color","className","style","backgroundColor","onClick","window","open","substring","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6OA4BeA,MAzBf,SAAcC,GAAQ,IACXC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,IAAKC,EAASH,EAATG,MAElB,OAAGA,EAEK,yBAAKC,UAAU,QACX,yBAAKA,UAAU,QAAQC,MAAO,CAACC,gBAAiBH,GAAQI,QAAS,WAAKC,OAAOC,KAAKP,KAC9E,wBAAIE,UAAU,QAAQH,EAAKS,UAAU,EAAE,KAE3C,wBAAIN,UAAU,QAAQH,IAM1B,yBAAKG,UAAU,QACX,yBAAKA,UAAU,QAAQG,QAAS,WAAKC,OAAOC,KAAKP,KAC7C,wBAAIE,UAAU,QAAQH,EAAKS,UAAU,EAAE,KAE3C,wBAAIN,UAAU,QAAQH,K,MCMvBU,MAxBf,WACE,OACE,yBAAKP,UAAU,OACb,wBAAIA,UAAU,SAAd,UACA,gCACE,yBAAKA,UAAU,SACb,6BACI,kBAAC,EAAD,CAAMH,KAAK,yCAAWC,IAAI,kDAC1B,kBAAC,EAAD,CAAMD,KAAK,yCAAWC,IAAI,kDAC1B,kBAAC,EAAD,CAAMD,KAAK,8CAAWC,IAAI,mDAC1B,kBAAC,EAAD,CAAMD,KAAK,kCAASC,IAAI,oDAE1B,6BACE,kBAAC,EAAD,CAAMD,KAAK,eAAKE,MAAM,UAAUD,IAAI,8BACpC,kBAAC,EAAD,CAAMD,KAAK,MAAME,MAAM,UAAUD,IAAI,6BACrC,kBAAC,EAAD,CAAMD,KAAK,iBAAOE,MAAM,UAAUD,IAAI,+BACtC,kBAAC,EAAD,CAAMD,KAAK,2BAAOE,MAAM,UAAUD,IAAI,+CCRhCU,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a404c128.chunk.js","sourcesContent":["import React from 'react';\nimport './Site.css';\n\nfunction Site(props) {\n    const {name, url, color} = props;\n\n    if(color) {\n        return (\n            <div className=\"item\">\n                <div className=\"frame\" style={{backgroundColor: color}} onClick={()=>{window.open(url)}}>\n                    <h1 className=\"icon\">{name.substring(0,1)}</h1>\n                </div>\n                <h2 className=\"name\">{name}</h2>\n            </div>\n        );\n    }\n    else {\n        return (\n            <div className=\"item\">\n                <div className=\"frame\" onClick={()=>{window.open(url)}}>\n                    <h1 className=\"icon\">{name.substring(0,1)}</h1>\n                </div>\n                <h2 className=\"name\">{name}</h2>\n            </div>\n        );\n    }\n};\n\nexport default Site;","import React from 'react';\nimport Site from './Site';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Orange</h1>\n      <center>\n        <div className=\"items\">\n          <div>\n              <Site name=\"사이즈 표 생성\" url=\"https://outstanding1301.github.io/size-table/\"/>\n              <Site name=\"다중 상품 생성\" url=\"https://outstanding1301.github.io/multi-item/\"/>\n              <Site name=\"상세이미지 생성\" url=\"https://outstanding1301.github.io/item-detail/\"/>\n              <Site name=\"바코드 생성\" url=\"https://outstanding1301.github.io/barcode-gen/\"/>\n            </div>\n            <div>\n              <Site name=\"쿠팡\" color=\"#fb637e\" url=\"https://wing.coupang.com/\"/>\n              <Site name=\"ESM\" color=\"#fbdb65\" url=\"https://www.esmplus.com/\"/>\n              <Site name=\"11번가\" color=\"#b580d1\" url=\"http://soffice.11st.co.kr/\"/>\n              <Site name=\"상상뷰티\" color=\"#78d64b\" url=\"https://cafe.naver.com/sangsangbeauty\"/>\n            </div>\n        </div>\n      </center>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}