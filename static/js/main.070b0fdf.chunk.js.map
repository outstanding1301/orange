{"version":3,"sources":["components/Site.js","fbconfig.js","firebase.js","components/Login.js","App.js","serviceWorker.js","index.js","stores/AccountStore.js"],"names":["Site","props","name","url","color","img","className","style","backgroundImage","backgroundSize","backgroundColor","onClick","window","open","substring","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","length","console","log","fbconfig","err","error","init","Login","inject","observer","login","onLogin","accountStore","id","pw","popup","database","ref","once","then","res","accounts","val","account","setLogin","setName","alert","localStorage","setItem","logout","setPw","removeItem","onInputID","e","setId","target","value","onInputPW","getItem","isLogin","fontSize","fontWeight","onChange","placeholder","type","React","Component","App","this","description","textAlign","Boolean","location","hostname","match","observable","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.070b0fdf.chunk.js","sourcesContent":["import React from 'react';\nimport './Site.css';\n\nfunction Site(props) {\n    const {name, url, color, img} = props;\n\n    if(color) {\n        return (\n            <div className=\"item\">\n                <div className=\"frame\" style={{backgroundImage: `url(${img})`\n                , backgroundSize: 'contain'\n                , backgroundColor: color}} onClick={()=>{window.open(url)}}>\n                    <h1 className=\"icon\"></h1>\n                </div>\n                <h2 className=\"name\">{name}</h2>\n            </div>\n        );\n    }\n    else {\n        return (\n            <div className=\"item\">\n                <div className=\"frame\" onClick={()=>{window.open(url)}}>\n                    <h1 className=\"icon\">{name.substring(0,1)}</h1>\n                </div>\n                <h2 className=\"name\">{name}</h2>\n            </div>\n        );\n    }\n};\n\nexport default Site;","export default {\n    apiKey: \"AIzaSyA0Azpk1RBYzNUBEEk43nzN9DkprrgAoro\",\n    authDomain: \"orangetools-240e6.firebaseapp.com\",\n    databaseURL: \"https://orangetools-240e6.firebaseio.com\",\n    projectId: \"orangetools-240e6\",\n    storageBucket: \"orangetools-240e6.appspot.com\",\n    messagingSenderId: \"986417516318\",\n    appId: \"1:986417516318:web:18a36c25d07afa6d4dc30f\",\n    measurementId: \"G-1HB1PLBX68\"\n};","import * as firebase from 'firebase'\nimport fbconfig from './fbconfig.js';\n\nfunction init() {\n    try {\n        if(!firebase.apps.length) {\n            firebase.initializeApp(fbconfig);\n            firebase.analytics();\n    \n            console.log('firebase init');\n        }\n        else {\n            console.log(firebase.apps)\n        }\n    }\n    catch (err) {\n        console.error('failed to init firebase')\n        console.error(err);\n    }\n}\n\ninit();\n\nexport default firebase;","import React, { Fragment, useState } from 'react';\nimport './Login.css';\nimport { inject, observer } from 'mobx-react';\nimport firebase from '../firebase';\n\n@inject('accountStore')\n@observer\nexport default class Login extends React.Component {\n    constructor(props) {\n        super(props);\n        const id = localStorage.getItem('orangeTools.id');\n        const pw = localStorage.getItem('orangeTools.pw');\n    \n        if(id && pw) {\n            this.onLogin(id, pw, false);\n        }\n    }\n\n    login = () => {\n        this.onLogin(this.props.accountStore.id, this.props.accountStore.pw);\n    }\n\n    onLogin = (id, pw, popup=true) => {\n        firebase.database().ref('/').once('value')\n        .then((res) => {\n            const accounts = res.val().accounts;\n            for(const account of accounts) {\n                if(account.id === id\n                    && account.pw === pw) {\n                        this.props.accountStore.setLogin(true);\n                        this.props.accountStore.setName(account.name);\n                        if(popup)\n                        alert(`로그인 했습니다. ${account.name}(${account.id})`);\n\n                        localStorage.setItem('orangeTools.id', account.id);\n                        localStorage.setItem('orangeTools.pw', account.pw);\n                }\n                else if (account.id === this.props.accountStore.id) {\n                    if(popup)\n                    alert('로그인 실패! (비밀번호 오류)');\n                }\n                else {\n                    if(popup)\n                    alert('로그인 실패! (없는 아이디)');\n                }\n            }\n        })\n    }\n\n    logout = () => {\n        this.props.accountStore.setPw('');\n        this.props.accountStore.setName('');\n        this.props.accountStore.setLogin(false);\n        localStorage.removeItem('orangeTools.id');\n        localStorage.removeItem('orangeTools.pw');\n    }\n\n    onInputID = (e) => {\n        this.props.accountStore.setId(e.target.value);\n    }\n    onInputPW = (e) => {\n        this.props.accountStore.setPw(e.target.value);\n    }\n    render() {\n        return (\n            <nav className='loginNav'>\n                {(()=>{\n                    if(this.props.accountStore.isLogin) {\n                        return (\n                        <Fragment>\n                        <div>\n                            <p className='accountInfo'><span style={{fontSize: '13px', fontWeight: 'bold' , color: '#89ff9d'}}>{this.props.accountStore.name}</span> 님 환영합니다.</p>\n                        </div>\n                        <p className='loginout' onClick={this.logout}>로그아웃</p>\n                        </Fragment>\n                        )\n                    }\n                    else {\n                        return (\n                            <div className='loginForm'>\n                                <input value={this.props.accountStore.id} onChange={this.onInputID} className='input_id' placeholder='ID'/>\n                                <input value={this.props.accountStore.pw} onChange={this.onInputPW} type='password' className='input_pw' placeholder='PW'/>\n                                <p className='loginout' onClick={this.login}>로그인</p>\n                            </div>\n                        )\n                    }\n                })()}\n            </nav>\n        );\n    }\n}","import React from 'react';\nimport Site from './components/Site';\nimport Login from './components/Login';\nimport './App.css';\nimport { inject, observer } from 'mobx-react';\n\n@inject('accountStore')\n@observer\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Login accountStore={this.props.accountStore}/>\n      <div className=\"background\"></div>\n        <h1 className=\"title\">Orange</h1>\n        <center>\n          <div className=\"items\">\n            {(()=>{\n              if(this.props.accountStore.isLogin) {\n                return (\n                  <div>\n                    <Site name=\"사이즈 표\" description='사이즈 표 생성' url=\"https://outstanding1301.github.io/size-table/\"/>\n                    <Site name=\"다중 상품\" description='옵션 선택 묶음 상품 HTML, 카드 생성' url=\"https://outstanding1301.github.io/multi-item/\"/>\n                    <Site name=\"상세이미지\" description='상품 상세 설명 이미지 생성' url=\"https://outstanding1301.github.io/item-detail/\"/>\n                    <Site name=\"바코드\" description='로켓 발주서로 바코드 생성' url=\"https://outstanding1301.github.io/barcode-gen/\"/>\n                    <Site name=\"주문정보\" description='로켓 발주서 이름순 정렬' url=\"https://outstanding1301.github.io/order-gen/\"/>\n                    <Site name=\"운송장\" description='쿠팡, ESM 주문서 CNPLUS 양식화' url=\"https://outstanding1301.github.io/waybill-gen/\"/>\n                    <Site name=\"태그 생성\" description='카테고리별 태그 생성' url=\"https://outstanding1301.github.io/tag-gen/\"/>\n                    <Site name=\"글자수 세기\" description='글자 수, 바이트 수 계산' url=\"https://outstanding1301.github.io/text-length-bytes/\"/>\n                    <Site name=\"스카이넷\" description='상품 업로드 작업 전반적 개선' url=\"https://outstanding1301.github.io/skynet/\"/>\n                    <Site name=\"업체 바코드\" description='발주서로 업체 바코드 생성' url=\"https://outstanding1301.github.io/barcode-gen2/\"/>\n                  </div>\n                )\n              }\n              else {\n                return <div style={{fontSize: '20px', textAlign: 'center', color: '#181818'}}>먼저 로그인 해주세요.</div>\n              }\n            })()}\n            \n              <div className=\"bottomNav\">\n                {(()=>{\n                  if(this.props.accountStore.isLogin) {\n                    return (\n                      <div>\n                        <Site name=\"쿠팡 WING\" color=\"#ffffff\" img=\"coupang.png\" url=\"https://wing.coupang.com/\"/>\n                        <Site name=\"ESM\" color=\"#393e8d\" img=\"esm.png\" url=\"https://www.esmplus.com/\"/>\n                        <Site name=\"11번가\" color=\"#ffffff\" img=\"11st.png\" url=\"http://soffice.11st.co.kr/\"/>\n                        <Site name=\"상상뷰티\" color=\"#78d64b\" img=\"naver.png\" url=\"https://cafe.naver.com/sangsangbeauty\"/>\n                      </div>\n                    )\n                  }\n                })()}\n              </div>\n          </div>\n        </center>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport AccountStore from './stores/AccountStore'\nimport { Provider } from 'mobx-react';\n\nconst accountStore = new AccountStore();\n\nReactDOM.render(\n    <Provider accountStore={accountStore}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {observable, action} from 'mobx';\n\nexport default class AccountStore {\n    @observable id = '';\n    @observable pw = '';\n    @observable name = '';\n    @observable isLogin = false;\n\n    @action setId = (val) => {\n        this.id=val;\n    }\n    @action setPw = (val) => {\n        this.pw=val;\n    }\n    @action setName = (val) => {\n        this.name=val;\n    }\n    @action setLogin = (val) => {\n        this.isLogin=val;\n    }\n}"],"sourceRoot":""}